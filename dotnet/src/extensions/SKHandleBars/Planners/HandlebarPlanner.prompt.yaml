name: HandlebarPlanner
template: |
  {{#message role="system"}}
  ## Instructions
  Create a Handlebar template that describes the steps necessary to accomplish the user's goal along with the results of each step.
  The rendered template should look like the following:
  ```json
  {
    response: <Response to the user>
  }
  ```

  ## Rules
  - Use the {{{{raw}}}}{{#set name='var'}}input{{/set}}{{{{/raw}}}} helper to store results of a helper so that you can use it again later as necessary.
  - Wrap your Handlebar template in ``` to escape it and prevent it from being rendered.
  - There are no initial variables available to you. You must create them yourself using the `set` helper.
  - Access variables directly without using a helper.
  - Do not chain helpers since you have a tendency to create syntax errors when you do; instead, use the `set` helper to store intermediate results between helper calls. For example, don't do this: {{{{raw}}}}`{{Plugin.Function input=(json value)}}` but instead do this: `{{#set name='var'}}{{json value}}{{/set}}{{Plugin.Function var}}`{{{{/raw}}}}
  - Declare function parameters as hash arguments for the custom helpers; this helps ensure the template renders correctly.
  - You must include all required inputs for each helper otherwise the template will not render correctly.
  - Avoid explicitly setting a `response` variable.
  - Only use helpers in the list below or the built-in block helpers in Handlebars (i.e., `#if`, `#unless`, `#each`, `#with`). Helpers not listed are not supported and will immediately fail.

  ## Helpers
  You have the following Handlebar helpers that you can use to accomplish the user's goal:

  ### #set
  - *Description*: Updates the handlebar variable with the given name to the given value. It does not print anything to the screen.
  - *Inputs*:
    - `name`: string - The name of the variable to set.
    - `content`: string - The value to set the variable to.
  - *Output*: none

  ### json
  - *Description*: Generates a JSON string from the given value.
  - *Inputs*:
    - `value`: string - The value to generate JSON for.
  - *Output*: string - The JSON string.

  {{#each functions}}
  ### {{PluginName}}_{{Name}}
  - *Description*: {{Description}}
  - *Inputs*:
  {{#each Parameters}}
    - `{{../Name}}_{{Name}}`: {{Type}} - {{Description}} {{#if IsRequired}}(required){{else}}(optional){{/if}}
  {{/each}}
  - *Output*: string - The result of the helper.
  {{!-- Additional information that can be added later
  {{#with OutputVariable}}
    - *Output*: {{type}} - {{description}}
  {{/with}}
  - *Errors*: {{Errors}}
  - *Examples*: 
  {{#each Examples}}
    - {{Example}}
  {{/each}}
  --}}
  {{/each}}
  {{/message}}

  {{#message role="user"}}
  {{goal}}
  {{/message}}

  {{#message role="system"}}
  Take a deep breath and provide the user with a Handlebar template that will accomplish their goal in the most efficient way possible.
  Ensure that the template is valid otherwise it will not work.
  {{/message}}

  {{#message role="assistant"}}
  Here is the Handlebar template that you requested:
  {{/message}}

  {{#if lastError}}
  {{#message role="assistant"}}
  ```
  {{lastPlan}}
  ```
  {{/message}}

  {{#message role="user"}}
  When I try to run the handlebars template I get this error:
  ```
  {{lastError}}
  ```
  Can you create a new template that fixes this error?
  {{/message}}

  {{#message role="assistant"}}
  I'm sorry for creating a template that causes that error, let me try to solve the goal with a different plan:
  {{/message}}
  {{/if}}

template_format: handlebars
description: A function that generates a plan to accomplish a user's goal.
input_variables:
  - name: functions
    type: Functions[]
    description: A list of functions that can be used to accomplish the user's goal.
    is_required: true
  - name: goal
    type: string
    description: The user's goal that the assistant should accomplish.
    is_required: true
output_variable:
    type: string
    description: The plan that the assistant will use to accomplish the user's goal.
models:
  default:
    max_tokens: 150
  gpt-4:
    temperature: 1.0
  gpt-3.5-turbo:
    temperature: 0.7